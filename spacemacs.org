#+TITLE: Mazay Jimenez's Emacs configuration
#+OPTIONS: toc:4 h:4

* Introduction
Configuration of emacs based on spacemacs distribution, I am trying space and am really liking it ...
* Settings
** Personal information
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq user-full-name "Mazay Jimenez"
        user-mail-address "mazay.jimenez@gmail.com")
#+END_SRC
** Detection
*** Detect Operating System
These functions identify what operating system is hosting Emacs, which can be handy for system specific configuration. I have run Emacs on Windows, OS X, Linux, and BSD. I currently use Linux most of the time, and OS X some of the time, so my configuration is geared towards those. Still, I may want to run my configuration on Windows or BSD in the future so I include those functions.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun is-mac-p
      ()
    (eq system-type 'darwin))

  (defun is-linux-p
      ()
    (eq system-type 'gnu/linux))

  (defun is-windows-p
      ()
    (or
     (eq system-type 'ms-dos)
     (eq system-type 'windows-nt)
     (eq system-type 'cygwin)))

  (defun is-bsd-p
      ()
    (eq system-type 'gnu/kfreebsd))
#+END_SRC
** Graphical Features
*** Prettify Symbols
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (global-prettify-symbols-mode +1)
#+END_SRC
** Security
*** Encryption
[[https://orgmode.org/worg/org-tutorials/encrypting-files.html][Encrypting specific entries in an org File with org-crypt]]

#+BEGIN_SRC emacs-lisp :tangle user-config.el
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))
;; GPG key to use for encryption
;; Either the Key ID or set to nil to use symmetric encryption.
(setq org-crypt-key "0xB1490ED9FFA40CDE")
#+END_SRC

** Backups
I find Emacs default behavior of saving files relative to the current directory annoying, as it puts backup files everywhere. Instead, this saves backups in one directory, a backup folder within my Emacs directory.

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))
#+END_SRC
** Prompts
*** Buffer / File Warnings
Remove the warning if a buffer or file does not exist, so you can create them. ([[https://iqbalansari.github.io/blog/2014/12/07/automatically-create-parent-directories-on-visiting-a-new-file-in-emacs/][Source]].)

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq confirm-nonexistent-file-or-buffer nil)

  (defun create-non-existent-directory ()
    "Check whether a given file's parent directories exist; if they do not, offer to create them."
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (when (and (not (file-exists-p parent-directory))
                 (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
        (make-directory parent-directory t))))

  (add-to-list 'find-file-not-found-functions #'create-non-existent-directory)
#+END_SRC
** Other
*** Encoding
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (prefer-coding-system 'utf-8)
  (setq coding-system-for-read 'utf-8)
  (setq coding-system-for-write 'utf-8)
#+END_SRC
* System
** Shells
Over time, I've come to prefer Eshell over shell mode or Ansi-term. The main features I tend to use are setting aliases, executing e-Lisp, and writing command output to a buffer.

*** Eshell
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package eshell
    :bind (("<f1>" . eshell))
    :hook ((eshell-mode . with-editor-export-editor)
           (eshell-mode . setup-company-eshell-autosuggest))
    :init
    (setq eshell-banner-message "")

    (defun new-eshell ()
      (interactive)
      (eshell 'true))

    (use-package esh-autosuggest
      :hook (eshell-mode . esh-autosuggest-mode)))
#+END_SRC
* Emacs
These are helper packages that make Emacs even more awesome.
** Hydra
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(use-package hydra
  :config
  (setq hydra-lv nil))
#+END_SRC
** Zooming
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(defhydra hydra-zoom ()
  "zoom"
  ("+" text-scale-increase "in")
  ("=" text-scale-increase "in")
  ("-" text-scale-decrease "out")
  ("_" text-scale-decrease "out")
  ("0" (text-scale-adjust 0) "reset")
  ("q" nil "quit" :color blue))

(bind-keys ("C-x C-0" . hydra-zoom/body)
           ("C-x C-=" . hydra-zoom/body)
           ("C-x C--" . hydra-zoom/body)
           ("C-x C-+" . hydra-zoom/body))
#+END_SRC
** Actionable URL's
Actionable URLs in Emacs buffers via [[http://xenodium.com/#actionable-urls-in-emacs-buffers][Álvaro Ramírez]].

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package goto-addr
    :hook ((compilation-mode . goto-address-mode)
           (prog-mode . goto-address-prog-mode)
           (eshell-mode . goto-address-mode)
           (shell-mode . goto-address-mode))
    :bind (:map goto-address-highlight-keymap
                ("C-c C-o" . goto-address-at-point))
    :commands (goto-address-prog-mode
               goto-address-mode))
#+END_SRC
** Emojis
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package emojify
    :init (global-emojify-mode))
#+END_SRC
* Browsing
** External Browsers
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq browse-url-browser-function (cond ((is-mac-p) 'browse-url-default-macosx-browser)
                                          ((is-linux-p) 'browse-url-default-browser)))

  (bind-key "C-c B" 'browse-url-at-point)
#+END_SRC
* Programming and Development
Here are language-specific (largely Lisps) or development-related packages.
** Programming Languages
*** HTML
#+BEGIN_SRC emacs-lisp :tangle user-config.el
;  (bind-key "C-c C-l" 'html-href-anchor html-mode-map)
#+END_SRC
** Development Tools
*** REST Exploring (Restclient)
See Magnars' tutorial on [[http://emacsrocks.com/e15.html][Emacs Rocks]].
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package restclient)
#+END_SRC
* Words and Numbers
"GNU Office Suite Pro Edition," coming to a cubicle near you!
** Writing (Org Mode)
*** Configuration
I use the stock package of org-mode as the default major mode.

My settings for capture were some of my first Elisp :) I did need, and still need, the help of the [[http://orgmode.org/manual/Capture-templates.html#Capture-templates][Org-Mode manual]], of course.

The theming for Org-Mode is derived from [[https://lepisma.github.io/2017/10/28/ricing-org-mode/][Ricing up Org Mode]] with help from folks on [[https://www.reddit.com/r/emacs/comments/9m22lw/ricing_org_mode_with_spacemacs/][Reddit]]. Be sure to download the fonts [[https://github.com/edwardtufte/et-book/tree/gh-pages/et-book][here]].

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package org
    :bind (("C-c l" . org-store-link)
           ("C-c c" . org-capture)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb)
           ("C-c M-k" . org-cut-subtree)
           :map org-mode-map
           ("C-c >" . org-time-stamp-inactive))
    :init
    (setq default-major-mode 'org-mode
          org-directory "~/org"
          org-log-done t
          org-startup-indented t
          org-startup-truncated nil
          org-startup-with-inline-images t
          org-completion-use-ido t
          org-default-notes-file (concat org-directory "~/org/gtd/inbox.org")
          org-image-actual-width '(300)
          org-goto-max-level 10
          org-imenu-depth 5
          org-goto-interface 'outline-path-completion
          org-outline-path-complete-in-steps nil
          org-src-fontify-natively t
          org-lowest-priority ?C
          org-default-priority ?B
          org-expiry-inactive-timestamps t
          org-show-notification-handler 'message
          org-special-ctrl-a/e t
          org-special-ctrl-k t
          org-yank-adjusted-subtrees t
          org-file-apps
          '((auto-mode . emacs)
            ("\\.mm\\'" . default)
            ("\\.x?html?\\'" . "firefox %s")
            ("\\.pdf\\'" . "open %s"))
          org-todo-keywords
          '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "SOMEDAY(.)" "MAYBE(m)" "|" "DONE(x!)" "CANCELLED(c)")
          (sequence "FEATURE(f)" "|" "COMPLETED(c)")
          (sequence "BUG(b)" "|" "FIXED(x)")
          (sequence "APPT(p)" "|" "DONE(d)" "CANCELLED(a)")
          (sequence "WAITING(w!)" "|" "DONE(d)"))
          ;; Theming
          org-ellipsis "  " ;; folding symbol
          org-pretty-entities t
          org-hide-emphasis-markers t ;; show actually italicized text instead of /italicized text/
          org-agenda-block-separator ""
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t
          org-mobile-inbox-for-pull  "~/org/flagged.org" ;; Set to the name of the file where new notes will be stored
          org-mobile-directory "~/Dropbox/Apps/MobileOrg") ;; Set to <your Dropbox root directory>/MobileOrg.

    (add-to-list 'org-global-properties
                 '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00"))

    (add-hook 'org-mode-hook
              '(lambda ()
                 (setq line-spacing 0.2) ;; Add more line padding for readability
                 (variable-pitch-mode 1) ;; All fonts with variable pitch.
                 (mapc
                  (lambda (face) ;; Other fonts with fixed-pitch.
                    (set-face-attribute face nil :inherit 'fixed-pitch))
                  (list 'org-code
                        'org-link
                        'org-block
                        'org-table
                        'org-verbatim
                        'org-block-begin-line
                        'org-block-end-line
                        'org-meta-line
                        'org-document-info-keyword)))))
#+END_SRC
*** Packages
**** org-modules
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (require 'org-install)
  (setq org-modules '(org-habit org-info org-tempo))
  (org-load-modules-maybe t)
#+END_SRC
***** org-habits
I use the [[http://orgmode.org/manual/Tracking-your-habits.html][org-habits]] module.

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq org-habit-graph-column 105)

  (defun org-make-habit ()
    (interactive)
    (org-set-property "STYLE" "habit"))
#+END_SRC
**** org-cliplink
=org-cliplink= lets you insert a link from your clipboard with a title that is fetched from the page's metadata.

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package org-cliplink
    :bind ("C-x p i" . org-cliplink))
#+END_SRC
**** org-bullets
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
**** org-autosort
I wanted to be able to add a sort property to files or subtrees and get automatic autosorting. A user of /r/orgmode/ delivered [[https://www.reddit.com/r/orgmode/comments/7gqsif/is_it_possible_to_auto_sort_a_file_or_subtree_by/][a solution]].

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun yant/org-entry-has-subentries ()
    "Any entry with subheadings."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (save-excursion
        (org-back-to-heading)
        (forward-line 1)
        (when (< (point) subtree-end)
          (re-search-forward "^\*+ " subtree-end t)))))

  (defun yant/org-entry-sort-by-property nil
    "Apply property sort on current entry. The sorting is done using property with the name from value of :SORT: property.
        For example, :SORT: DEADLINE will apply org-sort-entries by DEADLINE property on current entry."
    (let ((property (org-entry-get (point) "SORT" 'INHERIT)))
      (when (and (not (seq-empty-p property))
                 (yant/org-entry-has-subentries))
        (funcall #'org-sort-entries nil ?r nil nil property))))

  (defun yant/org-buffer-sort-by-property (&optional MATCH)
    "Sort all subtrees in buffer by the property, which is the value of their :SORT: property.
          Only subtrees, matching MATCH are selected"
    (org-map-entries #'yant/org-entry-sort-by-property MATCH 'file))

  (add-hook 'org-mode-hook #'yant/org-buffer-sort-by-property)
#+END_SRC
**** helm-org-rifle
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package helm-org-rifle
    :bind ("C-c o" . helm-org-rifle))
#+END_SRC
**** yankpad
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package yasnippet)

  (use-package yankpad
    :init
    (setq yankpad-file "~/org/templates/yankpad.org")
    (bind-keys :prefix-map yank-map
               :prefix "C-c y"
               ("c" . yankpad-set-category)
               ("e" . yankpad-edit)
               ("i" . yankpad-insert)
               ("m" . yankpad-map)
               ("r" . yankpad-reload)
               ("x" . yankpad-expand)))
#+END_SRC
*** Functionality
**** Agendas
***** Configuration
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq org-agenda-inhibit-startup nil
        org-agenda-show-future-repeats nil
        org-agenda-start-on-weekday nil
        org-agenda-skip-deadline-if-done t
        org-agenda-skip-scheduled-if-done t)

  (unbind-key "C-c [")
  (unbind-key "C-c ]")
#+END_SRC
***** Org-Super-Agenda
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package org-super-agenda
    :init
    (org-super-agenda-mode)

    (defun my-org-super-agenda ()
      (interactive)
      (let ((org-super-agenda-groups
             '((:name "Schedule"
                      :time-grid t)
               (:name "MAPLE" ;; monastery work
                      :tag "maple")
               ;; After the last group, the agenda will display items that didn't
               ;; match any of these groups, with the default order position of 99
               ;; To prevent this, add this code:
               ;; (:discard (:anything t))
               )))
        (org-agenda nil "a")))

    (defun my-org-super-agenda-today ()
      (interactive)
      (progn
        (my-org-super-agenda)
        (org-agenda-day-view)))

    (defun my-personal-agenda ()
      (interactive)
      (let ((org-super-agenda-groups
             '(;; After the last group, the agenda will display items that didn't
               ;; match any of these groups, with the default order position of 99
               ;; To prevent this, add this code:
               (:discard (:tag ("maple"))))))
        (org-agenda nil "a")
        (org-agenda-day-view)))

    (defun my-monastery-agenda ()
      (interactive)
      (let ((org-super-agenda-groups
             '((:name "MAPLE" ;; monastery work
                      :tag "maple")
               ;; After the last group, the agenda will display items that didn't
               ;; match any of these groups, with the default order position of 99
               ;; To prevent this, add this code:
               (:discard (:anything t)))))
        (org-agenda nil "a")
        (org-agenda-day-view)))

    (bind-keys ("C-c `" . my-org-super-agenda-today)
               ("C-c 1" . my-personal-agenda)
               ("C-c 2" . my-monastery-agenda)
               ("C-c 0" . my-org-super-agenda))

    :config
    ;; Enable folding
    (use-package origami
      :bind (:map org-super-agenda-header-map
                  ("TAB" . origami-toggle-node))
      :hook ((org-agenda-mode . origami-mode))))
#+END_SRC
***** Agenda Files
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq org-agenda-files (quote (;"~/org/todo.org"
                                 ;"~/org/agendas.org"
                                 "~/org/gtd/inbox.org"
                                 "~/org/gtd/gtd.org"
                                 "~/org/gtd/tickler.org"
                                 ;"~/org/waiting.org"
                                 ;"~/org/calendar/gcal.org"
                                 ;"~/org/calendar/maple.org"
                                 "~/org/gtd/someday.org")))
#+END_SRC
***** Open Org Agenda
This function opens the agenda in full screen.

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun open-agenda ()
    "Opens the org-agenda."
    (interactive)
    (let ((agenda "*Org Agenda*"))
      (if (equal (get-buffer agenda) nil)
          (org-agenda-list)
        (unless (equal (buffer-name (current-buffer)) agenda)
          (switch-to-buffer agenda))
        (org-agenda-redo t)
        (beginning-of-buffer))))

  (bind-key "<f5>" 'open-agenda)
  ;;(bind-key "a" 'open-agenda launcher-map)
#+END_SRC
***** Close Other Windows
Agendas should be full screen!
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (add-hook 'org-agenda-finalize-hook (lambda () (delete-other-windows)))
#+END_SRC
***** Custom Agendas
Here are some hand-made agenda files.

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun org-buffer-todo ()
    (interactive)
    "Creates a todo-list for the current buffer. Equivalent to the sequence: org-agenda, < (restrict to current buffer), t (todo-list)."
    (progn
      (org-agenda-set-restriction-lock 'file)
      (org-todo-list)))

  (defun org-buffer-agenda ()
    (interactive)
    "Creates an agenda for the current buffer. Equivalent to the sequence: org-agenda, < (restrict to current buffer), a (agenda-list)."
    (progn
      (org-agenda-set-restriction-lock 'file)
      (org-agenda-list)))

  (defun org-buffer-day-agenda ()
    (interactive)
    "Creates an agenda for the current buffer. Equivalent to the sequence: org-agenda, < (restrict to current buffer), a (agenda-list), d (org-agenda-day-view)."
    (progn
      (org-agenda-set-restriction-lock 'file)
      (org-agenda-list)
      (org-agenda-day-view))) ;; Maybe I should try writing a Emacs Lisp macro for this kind of thing!

  (bind-key "y" 'org-agenda-todo-yesterday org-agenda-mode-map)
#+END_SRC
****** Timeline
The org-timeline functionality was recently removed. This code, adapted from [[https://www.reddit.com/r/orgmode/comments/7hps9j/rip_orgtimeline/dqt4pfs/][a comment on Reddit]], adds similar functionality back.

#+BEGIN_SRC emacs-lisp :tangle user-config.el
(add-to-list 'org-agenda-custom-commands
             '("L" "Timeline"
               ((agenda
                 ""
                 ((org-agenda-span 7)
                  (org-agenda-prefix-format '((agenda . " %1c %?-12t% s"))))))))
#+END_SRC
****** Unscheduled Tasks
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (add-to-list 'org-agenda-custom-commands
               '("u" "Unscheduled TODOs"
                 ((todo ""
                        ((org-agenda-overriding-header "\nUnscheduled TODO")
                         (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp 'todo '("DONE" "CANCELLED" "MAYBE" "WAITING" "SOMEDAY"))))))) t)
#+END_SRC
****** [[https://www.reddit.com/r/orgmode/comments/7kddjq/org_agenda_view_for_scheduled_events_t_2/][Open Loops]]
Thanks Sacha for this custom code!

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun my-org-agenda-recent-open-loops ()
    (interactive)
    (let ((org-agenda-start-with-log-mode t)
          (org-agenda-use-time-grid nil)
          (org-agenda-files '("~/org/calendar/gcal.org" "~/org/calendar/maple.org")))
      (fetch-calendar)
      (org-agenda-list nil (org-read-date nil nil "-2d") 4)
      (beginend-org-agenda-mode-goto-beginning)))

  (defun my-org-agenda-longer-open-loops ()
    (interactive)
    (let ((org-agenda-start-with-log-mode t)
          (org-agenda-use-time-grid nil)
          (org-agenda-files '("~/org/calendar/gcal.org" "~/org/calendar/maple.org")))
      (fetch-calendar)
      (org-agenda-list 'file (org-read-date nil nil "-14d") 28)
      (beginend-org-agenda-mode-goto-beginning)))
#+END_SRC
****** Delegated and Waiting Tasks
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (add-to-list 'org-agenda-custom-commands
               '("w" "WAITING" todo "WAITING" ((org-agenda-overriding-header "Delegated and/or Waiting"))) t)
#+END_SRC
***** Auto Advance
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun org-agenda-set-tags-auto-advance ()
    (interactive)
    (while t
      (call-interactively #'org-agenda-set-tags)
      (org-agenda-next-line)))

  (bind-key "`" 'org-agenda-set-tags-auto-advance org-agenda-mode-map)
#+END_SRC
**** Capture Templates
The first Emacs Lisp that I ever wrote was to configure my capture templates!

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq org-capture-templates
        '(("t" "Todo [inbox]" entry (file "~/org/gtd/inbox.org")
           "* TODO %i%?")
         ("p" "Project" entry (file+headline "~/org/gtd/gtd.org" "Projects")
           (file "~/org/templates/newprojecttemplate.org"))
          ("s" "Someday" entry (file+headline "~/org/gtd/someday.org" "Someday / Maybe")
           "* SOMEDAY %?\n")
          ("m" "Maybe" entry (file+headline "~/org/gtd/someday.org" "Someday / Maybe")
           "* MAYBE %?\n")
          ("l" "Log" entry (file+olp+datetree "~/org/log.org" "Log")
           (file "~/org/templates/logtemplate.org"))
           ("T" "Tickler" entry (file+headline "~/org/gtd/tickler.org" "Tickler") "* %i%? \nSCHEDULED: %^t")))
#+END_SRC
**** Clocking
I really like Org-mode's clocking functionality. I mostly use it for keeping time of billable tasks.
***** Configuration
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq org-log-done 'time
        org-clock-idle-time nil
        org-clock-continuously nil
        org-clock-persist t
        org-clock-in-switch-to-state "STARTED"
        org-clock-in-resume nil
        org-clock-report-include-clocking-task t
        org-clock-out-remove-zero-time-clocks t
        ;; Too many clock entries clutter up a heading
        org-log-into-drawer t
        org-clock-into-drawer 1)
#+END_SRC
***** Remove Empty Logbook Drawers
Remove empty LOGBOOK drawers on clock out, from [[https://michael.englehorn.com/config.html][Michael Englehorn's Emacs Configuration]]. This [[https://stackoverflow.com/questions/21767471/org-capture-and-time-clocking-misbehaving#21797427][Stack Overflow post]] shows the fix to the bug in the original function (remove the "LOGBOOK" specification).

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun bh/remove-empty-drawer-on-clock-out ()
    (interactive)
    (save-excursion
      (beginning-of-line 0)
      (org-remove-empty-drawer-at (point))))

  (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
#+END_SRC
***** Key Bindings
However, there are a *lot* of commands for clocking; this is a perfect instance for a Hydra.

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defhydra hydra-org-clock (:color blue :hint nil)
    "
  Clock   In/out^     ^Edit^   ^Summary     (_?_)
  -----------------------------------------
          _i_n         _e_dit   _g_oto entry
          _c_ontinue   _q_uit   _d_isplay
          _o_ut        ^ ^      _r_eport
        "
    ("i" org-clock-in)
    ("o" org-clock-out)
    ("c" org-clock-in-last)
    ("e" org-clock-modify-effort-estimate)
    ("q" org-clock-cancel)
    ("g" org-clock-goto)
    ("d" org-clock-display)
    ("r" org-clock-report)
    ("?" (org-info "Clocking commands")))

  (defhydra hydra-org-agenda-clock (:color blue :hint nil)
    "
  Clock   In/out^
  -----------------------------------------
          _i_n
          _g_oto entry
          _o_ut
          _q_uit
        "
    ("i" org-agenda-clock-in)
    ("o" org-agenda-clock-out)
    ("q" org-agenda-clock-cancel)
    ("g" org-agenda-clock-goto))

;;  (bind-keys ("C-c w" . hydra-org-clock/body)
;;             :map org-agenda-mode-map
;;             ("C-c w" . hydra-org-agenda-clock/body))
#+END_SRC
**** Drag and Drop
#+BEGIN_SRC emacs-lisp :tangle user-config.el
(use-package org-download)
#+END_SRC
**** Exporting
I often want to export Org-Mode documents into other formats. This section contains some defaults and packages that have made that workflow easier for me.

***** Export Defaults
Org's export defaults to inserting a TOC and using section numbers, but usually I don't want or need those things. (It can make delieverables more attractive, though, so I make sure to put a hint in here to remind me about how to change that on a file-by-file basis.)

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq org-export-with-toc nil
        org-export-with-section-numbers nil)
#+END_SRC

To override, add to the #+OPTIONS: org header for a particular file:
- To add in a table of contents: =toc:4= (to a particular depth) or =toc:t= (to all depths)
- To show the section numbers, set =num:t=
* Organization (GTD and PARA)
** Projects
A project is "any outcome that will take more than one action step to complete." As a result of implementing Tiago Forte's "PARA" system, I can ensure that I always have an up to date project list.

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun go-to-projects ()
    (interactive)
    (find-file "~/org/gtd/gtd.org")
    (widen)
    (beginning-of-buffer)
    (re-search-forward "* Projects")
    (beginning-of-line))

  (defun project-overview ()
    (interactive)
    (go-to-projects)
    (org-narrow-to-subtree)
    (org-sort-entries t ?p)
    (org-columns))

  (defun project-deadline-overview ()
    (interactive)
    (go-to-projects)
    (org-narrow-to-subtree)
    (org-sort-entries t ?d)
    (org-columns))
#+END_SRC

The concept of Stuck Projects comes from David Allen's GTD. A stuck project is a project without any action steps or tasks associated with it.

Org-Mode has the ability to tell you which subtrees don't have tasks associated with them. You can also configure what it recognizes as a stuck project. Unfortunately, by default, this functionality picks up a lot of noise.

This function creates an agenda of stuck projects that is restricted to my "Projects" subtree.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun my-org-agenda-list-stuck-projects ()
    (interactive)
    (go-to-projects)
    (org-agenda nil "#" 'subtree))
#+END_SRC
** Areas
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun go-to-areas ()
      (interactive)
      (find-file "~/org/gtd/gtd.org")
      (widen)
      (beginning-of-buffer)
      (re-search-forward "* Areas")
      (beginning-of-line))

  (defun areas-overview ()
      (interactive)
      (go-to-areas)
      (org-narrow-to-subtree)
      (org-columns))
#+END_SRC
** Reviews
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun my-new-daily-review ()
    (interactive)
    (let ((org-capture-templates '(("d" "Review: Daily Review" entry (file+olp+datetree "/tmp/reviews.org")
                                    (file "~/org/templates/dailyreviewtemplate.org")))))
      (progn
        (org-capture nil "d")
        (org-capture-finalize t)
        (org-speed-move-safe 'outline-up-heading)
        (org-narrow-to-subtree)
        (fetch-calendar)
        (org-clock-in))))

  (defun my-new-weekly-review ()
    (interactive)
    (let ((org-capture-templates '(("w" "Review: Weekly Review" entry (file+olp+datetree "/tmp/reviews.org")
                                    (file "~/org/templates/weeklyreviewtemplate.org")))))
      (progn
        (org-capture nil "w")
        (org-capture-finalize t)
        (org-speed-move-safe 'outline-up-heading)
        (org-narrow-to-subtree)
        (fetch-calendar)
        (org-clock-in))))

  (defun my-new-monthly-review ()
    (interactive)
    (let ((org-capture-templates '(("m" "Review: Monthly Review" entry (file+olp+datetree "/tmp/reviews.org")
                                    (file "~/org/templates/monthlyreviewtemplate.org")))))
      (progn
        (org-capture nil "m")
        (org-capture-finalize t)
        (org-speed-move-safe 'outline-up-heading)
        (org-narrow-to-subtree)
        (fetch-calendar)
        (org-clock-in))))

  (bind-keys :prefix-map review-map
             :prefix "C-c r"
             ("d" . my-new-daily-review)
             ("w" . my-new-weekly-review)
             ("m" . my-new-monthly-review))

  (f-touch "/tmp/reviews.org")
#+END_SRC
** Progressive Summarization
Progressive Summarization is the key methodology used for capturing reference materials in a useful way. The idea is that you annotate and recreate your notes with optional layers, added as needed:

- Layer 1: the raw note
- Layer 2: bolding
- Layer 3: highlighting
- Layer 4 is re-summarization
- Layer 5 is "remixing" the content

Layers 1, 4, and 5 are easy or obvious enough as to how to do them in Org-Mode. Layer 2 might be less obvious for others, but I already use sp-local-pairs to implement an easy bolding process, which is bolded in Emacs and also when exported.

Layer 3 is the tricky part. Ideally, I want to easily highlight a region so that it is *persistently* and *cleanly* highlighted in Emacs, and highlighted in HTML exports. You can highlight HTML with the ~mark~ tag. I've figured out part of this, but not everything.

Org-mode can have [inline literal HTML tags](http://orgmode.org/manual/Quoting-HTML-tags.html#Quoting-HTML-tags), like this:

~@@html:<b>@@bold text@@html:</b>@@~

I can use this to highlight text on export with the ~<mark>~ tag:

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package wrap-region
    :ensure t
    :config
    (wrap-region-global-mode t)
    (wrap-region-add-wrapper "@@html:<mark>@@" "@@html:</mark>@@" "~" 'org-mode))
#+END_SRC

In the future, I'd like to:
- Hide or clean this markup when displayed in Emacs, a la prettify symbols mode
- Automatically highlight the wrapped region *in Emacs*
* Functions
** Emacs Configuration File
This function and the corresponding keybinding allows me to rapidly access my configuration. They are adapted from Bozhidar Batsov's [[http://emacsredux.com/blog/2013/05/18/instant-access-to-init-dot-el/][post on Emacs Redux]].

I use mwf-init-file rather than user-init-file, because I edit the config file in a Git repo.

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun find-init-file ()
    "Edit my init file in another window."
    (interactive)
    (let ((mwf-init-file "~/.spacemacs.d/spacemacs.org"))
      (find-file mwf-init-file)))

  (bind-key "C-c I" 'find-init-file)
#+END_SRC

Relatedly, I often want to reload my init-file. This will actually use the system-wide user-init-file variable.

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun reload-init-file ()
    "Reload my init file."
    (interactive)
    (load-file user-init-file))

  (bind-key "C-c M-l" 'reload-init-file)
#+END_SRC
** Buffer Management
*** Kill This Buffer
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun kill-this-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (bind-key "C-x C-k" 'kill-this-buffer)
#+END_SRC

By default, pressing 'q' in Dired, the packages menu, or Elfeed runs quit-window, which quits the window and buries its buffer. I'd prefer the buffer to close.

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (bind-keys :map dired-mode-map
             ("q" . kill-this-buffer))

  (bind-keys :map package-menu-mode-map
             ("q" . kill-this-buffer))
#+END_SRC
*** Kill All Other Buffers
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun kill-other-buffers ()
     "Kill all other buffers."
     (interactive)
     (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC
** Unfill Paragraph
This function borrowed from Sacha.

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn
                   (barf-if-buffer-read-only)
                   (list t)))
    (let ((fill-column (point-max)))
      (fill-paragraph nil region)))

  (bind-key "M-Q" 'unfill-paragraph)
#+END_SRC
** Move Lines
Via [[https://github.com/hrs/dotfiles][Harry Schwartz]].

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun move-line-up ()
    (interactive)
    (transpose-lines 1)
    (forward-line -2))

  (defun move-line-down ()
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1))

  (bind-keys ("M-<up>" . move-line-up)
             ("M-<down>" . move-line-down))
#+END_SRC
** Flush Empty Lines
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun flush-empty-lines ()
    (interactive)
    (flush-lines "^$"))
#+END_SRC
